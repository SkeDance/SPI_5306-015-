
tempSensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000424  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  00000498  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ad5  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000921  00000000  00000000  00001049  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000460  00000000  00000000  0000196a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  00001dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046c  00000000  00000000  00001eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000016a  00000000  00000000  00002320  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000248a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5f c0       	rjmp	.+190    	; 0xfc <__vector_15>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	aa 30       	cpi	r26, 0x0A	; 10
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	9d d0       	rcall	.+314    	; 0x1e4 <main>
  aa:	ba c1       	rjmp	.+884    	; 0x420 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <SPI_Init>:

unsigned char USART_Receive(void)
{
	while (!(UCSR1A & (1 << RXC1)));
	return UDR1;
}
  ae:	87 e0       	ldi	r24, 0x07	; 7
  b0:	87 bb       	out	0x17, r24	; 23
  b2:	bb 98       	cbi	0x17, 3	; 23
  b4:	8f e0       	ldi	r24, 0x0F	; 15
  b6:	88 bb       	out	0x18, r24	; 24
  b8:	80 ed       	ldi	r24, 0xD0	; 208
  ba:	8d b9       	out	0x0d, r24	; 13
  bc:	08 95       	ret

000000be <USART_Init>:
  be:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
  c2:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
  c6:	88 e1       	ldi	r24, 0x18	; 24
  c8:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
  cc:	8e e0       	ldi	r24, 0x0E	; 14
  ce:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
  d2:	08 95       	ret

000000d4 <GPIO_init>:
  d4:	8a b3       	in	r24, 0x1a	; 26
  d6:	86 60       	ori	r24, 0x06	; 6
  d8:	8a bb       	out	0x1a, r24	; 26
  da:	08 95       	ret

000000dc <USART_Transmit>:
  dc:	eb e9       	ldi	r30, 0x9B	; 155
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	90 81       	ld	r25, Z
  e2:	95 ff       	sbrs	r25, 5
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <USART_Transmit+0x4>
  e6:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  ea:	08 95       	ret

000000ec <InitTimer0>:


void InitTimer0(){
	TIMSK |= (1 << OCIE0);
  ec:	87 b7       	in	r24, 0x37	; 55
  ee:	82 60       	ori	r24, 0x02	; 2
  f0:	87 bf       	out	0x37, r24	; 55
	TCCR0 = (1 << CS00) | (1 << CS01) | (1 << CS02) | (1 << WGM00) | (1 << WGM01);
  f2:	8f e4       	ldi	r24, 0x4F	; 79
  f4:	83 bf       	out	0x33, r24	; 51
	OCR0 = 7;
  f6:	87 e0       	ldi	r24, 0x07	; 7
  f8:	81 bf       	out	0x31, r24	; 49
  fa:	08 95       	ret

000000fc <__vector_15>:
}

ISR(TIMER0_COMP_vect){
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
	ms_count++;
 10a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ms_count>
 10e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ms_count+0x1>
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <ms_count+0x1>
 118:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ms_count>
}
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <convert_Temp>:

float convert_Temp(){
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 132:	62 97       	sbiw	r28, 0x12	; 18
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	f8 94       	cli
 138:	de bf       	out	0x3e, r29	; 62
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	cd bf       	out	0x3d, r28	; 61
	int data[9];
	SPI_PORT &= ~(1 << CHIP_SELECT);
 13e:	c0 98       	cbi	0x18, 0	; 24

float temp = 0;
float msg = 0;

  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
 140:	8c ec       	ldi	r24, 0xCC	; 204
 142:	8f b9       	out	0x0f, r24	; 15
    asm volatile("nop");
 144:	00 00       	nop
    while(!(SPSR & (1 << SPIF))) ; // wait
 146:	77 9b       	sbis	0x0e, 7	; 14
 148:	fe cf       	rjmp	.-4      	; 0x146 <convert_Temp+0x1c>
    return SPDR;
 14a:	8f b1       	in	r24, 0x0f	; 15

float temp = 0;
float msg = 0;

  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
 14c:	84 e4       	ldi	r24, 0x44	; 68
 14e:	8f b9       	out	0x0f, r24	; 15
    asm volatile("nop");
 150:	00 00       	nop
    while(!(SPSR & (1 << SPIF))) ; // wait
 152:	77 9b       	sbis	0x0e, 7	; 14
 154:	fe cf       	rjmp	.-4      	; 0x152 <convert_Temp+0x28>
    return SPDR;
 156:	8f b1       	in	r24, 0x0f	; 15
float convert_Temp(){
	int data[9];
	SPI_PORT &= ~(1 << CHIP_SELECT);
	transfer(0xCC);
	transfer(0x44);
	SPI_PORT |= (1 << CHIP_SELECT);
 158:	c0 9a       	sbi	0x18, 0	; 24
	
	while(ms_count != 100)
 15a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ms_count>
 15e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ms_count+0x1>
 162:	84 36       	cpi	r24, 0x64	; 100
 164:	91 05       	cpc	r25, r1
 166:	c9 f7       	brne	.-14     	; 0x15a <convert_Temp+0x30>
	;
	
	ms_count = 0;
 168:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <ms_count+0x1>
 16c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <ms_count>
	SPI_PORT &= ~(1 << CHIP_SELECT);
 170:	c0 98       	cbi	0x18, 0	; 24

float temp = 0;
float msg = 0;

  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
 172:	1f b8       	out	0x0f, r1	; 15
    asm volatile("nop");
 174:	00 00       	nop
    while(!(SPSR & (1 << SPIF))) ; // wait
 176:	77 9b       	sbis	0x0e, 7	; 14
 178:	fe cf       	rjmp	.-4      	; 0x176 <convert_Temp+0x4c>
    return SPDR;
 17a:	8f b1       	in	r24, 0x0f	; 15

float temp = 0;
float msg = 0;

  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
 17c:	1f b8       	out	0x0f, r1	; 15
    asm volatile("nop");
 17e:	00 00       	nop
    while(!(SPSR & (1 << SPIF))) ; // wait
 180:	77 9b       	sbis	0x0e, 7	; 14
 182:	fe cf       	rjmp	.-4      	; 0x180 <convert_Temp+0x56>
    return SPDR;
 184:	8f b1       	in	r24, 0x0f	; 15
	
	ms_count = 0;
	SPI_PORT &= ~(1 << CHIP_SELECT);
	transfer(0x00);
	transfer(0x00);
	SPI_PORT |= (1 << CHIP_SELECT);
 186:	c0 9a       	sbi	0x18, 0	; 24
	int T_KOD;
	T_KOD = (data[0] | (data[1] << 8));
	temp = (float)T_KOD * 0.0625;
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	7b 81       	ldd	r23, Y+3	; 0x03
 18e:	89 81       	ldd	r24, Y+1	; 0x01
 190:	9a 81       	ldd	r25, Y+2	; 0x02
 192:	68 2b       	or	r22, r24
 194:	79 2b       	or	r23, r25
 196:	07 2e       	mov	r0, r23
 198:	00 0c       	add	r0, r0
 19a:	88 0b       	sbc	r24, r24
 19c:	99 0b       	sbc	r25, r25
 19e:	51 d0       	rcall	.+162    	; 0x242 <__floatsisf>
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	40 e8       	ldi	r20, 0x80	; 128
 1a6:	5d e3       	ldi	r21, 0x3D	; 61
 1a8:	87 d0       	rcall	.+270    	; 0x2b8 <__mulsf3>
 1aa:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <temp>
 1ae:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <temp+0x1>
 1b2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <temp+0x2>
 1b6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <temp+0x3>
	TEST_PORT ^= (1 << TEST_LED_SPI);
 1ba:	9b b3       	in	r25, 0x1b	; 27
 1bc:	84 e0       	ldi	r24, 0x04	; 4
 1be:	89 27       	eor	r24, r25
 1c0:	8b bb       	out	0x1b, r24	; 27
	return temp;
 1c2:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <temp>
 1c6:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <temp+0x1>
 1ca:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <temp+0x2>
 1ce:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <temp+0x3>
	
}
 1d2:	62 96       	adiw	r28, 0x12	; 18
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	f8 94       	cli
 1d8:	de bf       	out	0x3e, r29	; 62
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	cd bf       	out	0x3d, r28	; 61
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <main>:

int main(void)
{
	cli();
 1e4:	f8 94       	cli
		
	sei();
 1e6:	78 94       	sei
	
	GPIO_init();
 1e8:	75 df       	rcall	.-278    	; 0xd4 <GPIO_init>
	InitTimer0();
 1ea:	80 df       	rcall	.-256    	; 0xec <InitTimer0>
	SPI_Init();
 1ec:	60 df       	rcall	.-320    	; 0xae <SPI_Init>
	USART_Init(UBBR_VALUE);
 1ee:	87 e6       	ldi	r24, 0x67	; 103
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	65 df       	rcall	.-310    	; 0xbe <USART_Init>
 1f4:	9b b3       	in	r25, 0x1b	; 27
	
	TEST_PORT ^= (1 << TEST_LED_SPI);
 1f6:	84 e0       	ldi	r24, 0x04	; 4
 1f8:	89 27       	eor	r24, r25
 1fa:	8b bb       	out	0x1b, r24	; 27
 1fc:	9b b3       	in	r25, 0x1b	; 27
	TEST_PORT ^= (1 << TEST_LED_UART);
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	89 27       	eor	r24, r25
 202:	8b bb       	out	0x1b, r24	; 27
		//msg = 100.99;
		unsigned char* ptr;
		ptr = (unsigned char*)& msg;
		
		for(int i = 0; i < 4; i++){
			USART_Transmit(*(ptr++));
 204:	c0 e0       	ldi	r28, 0x00	; 0
 206:	d1 e0       	ldi	r29, 0x01	; 1
		}
		TEST_PORT ^= (1 << TEST_LED_UART);;
 208:	12 e0       	ldi	r17, 0x02	; 2
	//unsigned char strlenght = 12;
	//unsigned char k = 0;
    while (1) 
    {
		
		msg = convert_Temp();
 20a:	8f df       	rcall	.-226    	; 0x12a <convert_Temp>
 20c:	26 2f       	mov	r18, r22
 20e:	46 2f       	mov	r20, r22
 210:	57 2f       	mov	r21, r23
 212:	68 2f       	mov	r22, r24
 214:	79 2f       	mov	r23, r25
 216:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__DATA_REGION_ORIGIN__>
 21a:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 21e:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 222:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
		//msg = 100.99;
		unsigned char* ptr;
		ptr = (unsigned char*)& msg;
		
		for(int i = 0; i < 4; i++){
			USART_Transmit(*(ptr++));
 226:	82 2f       	mov	r24, r18
 228:	59 df       	rcall	.-334    	; 0xdc <USART_Transmit>
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	57 df       	rcall	.-338    	; 0xdc <USART_Transmit>
 22e:	8a 81       	ldd	r24, Y+2	; 0x02
 230:	55 df       	rcall	.-342    	; 0xdc <USART_Transmit>
 232:	8b 81       	ldd	r24, Y+3	; 0x03
 234:	53 df       	rcall	.-346    	; 0xdc <USART_Transmit>
 236:	8b b3       	in	r24, 0x1b	; 27
		}
		TEST_PORT ^= (1 << TEST_LED_UART);;
 238:	81 27       	eor	r24, r17
 23a:	8b bb       	out	0x1b, r24	; 27
 23c:	e6 cf       	rjmp	.-52     	; 0x20a <main+0x26>

0000023e <__floatunsisf>:
 23e:	e8 94       	clt
 240:	09 c0       	rjmp	.+18     	; 0x254 <__floatsisf+0x12>

00000242 <__floatsisf>:
 242:	97 fb       	bst	r25, 7
 244:	3e f4       	brtc	.+14     	; 0x254 <__floatsisf+0x12>
 246:	90 95       	com	r25
 248:	80 95       	com	r24
 24a:	70 95       	com	r23
 24c:	61 95       	neg	r22
 24e:	7f 4f       	sbci	r23, 0xFF	; 255
 250:	8f 4f       	sbci	r24, 0xFF	; 255
 252:	9f 4f       	sbci	r25, 0xFF	; 255
 254:	99 23       	and	r25, r25
 256:	a9 f0       	breq	.+42     	; 0x282 <__floatsisf+0x40>
 258:	f9 2f       	mov	r31, r25
 25a:	96 e9       	ldi	r25, 0x96	; 150
 25c:	bb 27       	eor	r27, r27
 25e:	93 95       	inc	r25
 260:	f6 95       	lsr	r31
 262:	87 95       	ror	r24
 264:	77 95       	ror	r23
 266:	67 95       	ror	r22
 268:	b7 95       	ror	r27
 26a:	f1 11       	cpse	r31, r1
 26c:	f8 cf       	rjmp	.-16     	; 0x25e <__floatsisf+0x1c>
 26e:	fa f4       	brpl	.+62     	; 0x2ae <__floatsisf+0x6c>
 270:	bb 0f       	add	r27, r27
 272:	11 f4       	brne	.+4      	; 0x278 <__floatsisf+0x36>
 274:	60 ff       	sbrs	r22, 0
 276:	1b c0       	rjmp	.+54     	; 0x2ae <__floatsisf+0x6c>
 278:	6f 5f       	subi	r22, 0xFF	; 255
 27a:	7f 4f       	sbci	r23, 0xFF	; 255
 27c:	8f 4f       	sbci	r24, 0xFF	; 255
 27e:	9f 4f       	sbci	r25, 0xFF	; 255
 280:	16 c0       	rjmp	.+44     	; 0x2ae <__floatsisf+0x6c>
 282:	88 23       	and	r24, r24
 284:	11 f0       	breq	.+4      	; 0x28a <__floatsisf+0x48>
 286:	96 e9       	ldi	r25, 0x96	; 150
 288:	11 c0       	rjmp	.+34     	; 0x2ac <__floatsisf+0x6a>
 28a:	77 23       	and	r23, r23
 28c:	21 f0       	breq	.+8      	; 0x296 <__floatsisf+0x54>
 28e:	9e e8       	ldi	r25, 0x8E	; 142
 290:	87 2f       	mov	r24, r23
 292:	76 2f       	mov	r23, r22
 294:	05 c0       	rjmp	.+10     	; 0x2a0 <__floatsisf+0x5e>
 296:	66 23       	and	r22, r22
 298:	71 f0       	breq	.+28     	; 0x2b6 <__floatsisf+0x74>
 29a:	96 e8       	ldi	r25, 0x86	; 134
 29c:	86 2f       	mov	r24, r22
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	2a f0       	brmi	.+10     	; 0x2ae <__floatsisf+0x6c>
 2a4:	9a 95       	dec	r25
 2a6:	66 0f       	add	r22, r22
 2a8:	77 1f       	adc	r23, r23
 2aa:	88 1f       	adc	r24, r24
 2ac:	da f7       	brpl	.-10     	; 0x2a4 <__floatsisf+0x62>
 2ae:	88 0f       	add	r24, r24
 2b0:	96 95       	lsr	r25
 2b2:	87 95       	ror	r24
 2b4:	97 f9       	bld	r25, 7
 2b6:	08 95       	ret

000002b8 <__mulsf3>:
 2b8:	0b d0       	rcall	.+22     	; 0x2d0 <__mulsf3x>
 2ba:	78 c0       	rjmp	.+240    	; 0x3ac <__fp_round>
 2bc:	69 d0       	rcall	.+210    	; 0x390 <__fp_pscA>
 2be:	28 f0       	brcs	.+10     	; 0x2ca <__mulsf3+0x12>
 2c0:	6e d0       	rcall	.+220    	; 0x39e <__fp_pscB>
 2c2:	18 f0       	brcs	.+6      	; 0x2ca <__mulsf3+0x12>
 2c4:	95 23       	and	r25, r21
 2c6:	09 f0       	breq	.+2      	; 0x2ca <__mulsf3+0x12>
 2c8:	5a c0       	rjmp	.+180    	; 0x37e <__fp_inf>
 2ca:	5f c0       	rjmp	.+190    	; 0x38a <__fp_nan>
 2cc:	11 24       	eor	r1, r1
 2ce:	a2 c0       	rjmp	.+324    	; 0x414 <__fp_szero>

000002d0 <__mulsf3x>:
 2d0:	7e d0       	rcall	.+252    	; 0x3ce <__fp_split3>
 2d2:	a0 f3       	brcs	.-24     	; 0x2bc <__mulsf3+0x4>

000002d4 <__mulsf3_pse>:
 2d4:	95 9f       	mul	r25, r21
 2d6:	d1 f3       	breq	.-12     	; 0x2cc <__mulsf3+0x14>
 2d8:	95 0f       	add	r25, r21
 2da:	50 e0       	ldi	r21, 0x00	; 0
 2dc:	55 1f       	adc	r21, r21
 2de:	62 9f       	mul	r22, r18
 2e0:	f0 01       	movw	r30, r0
 2e2:	72 9f       	mul	r23, r18
 2e4:	bb 27       	eor	r27, r27
 2e6:	f0 0d       	add	r31, r0
 2e8:	b1 1d       	adc	r27, r1
 2ea:	63 9f       	mul	r22, r19
 2ec:	aa 27       	eor	r26, r26
 2ee:	f0 0d       	add	r31, r0
 2f0:	b1 1d       	adc	r27, r1
 2f2:	aa 1f       	adc	r26, r26
 2f4:	64 9f       	mul	r22, r20
 2f6:	66 27       	eor	r22, r22
 2f8:	b0 0d       	add	r27, r0
 2fa:	a1 1d       	adc	r26, r1
 2fc:	66 1f       	adc	r22, r22
 2fe:	82 9f       	mul	r24, r18
 300:	22 27       	eor	r18, r18
 302:	b0 0d       	add	r27, r0
 304:	a1 1d       	adc	r26, r1
 306:	62 1f       	adc	r22, r18
 308:	73 9f       	mul	r23, r19
 30a:	b0 0d       	add	r27, r0
 30c:	a1 1d       	adc	r26, r1
 30e:	62 1f       	adc	r22, r18
 310:	83 9f       	mul	r24, r19
 312:	a0 0d       	add	r26, r0
 314:	61 1d       	adc	r22, r1
 316:	22 1f       	adc	r18, r18
 318:	74 9f       	mul	r23, r20
 31a:	33 27       	eor	r19, r19
 31c:	a0 0d       	add	r26, r0
 31e:	61 1d       	adc	r22, r1
 320:	23 1f       	adc	r18, r19
 322:	84 9f       	mul	r24, r20
 324:	60 0d       	add	r22, r0
 326:	21 1d       	adc	r18, r1
 328:	82 2f       	mov	r24, r18
 32a:	76 2f       	mov	r23, r22
 32c:	6a 2f       	mov	r22, r26
 32e:	11 24       	eor	r1, r1
 330:	9f 57       	subi	r25, 0x7F	; 127
 332:	50 40       	sbci	r21, 0x00	; 0
 334:	8a f0       	brmi	.+34     	; 0x358 <__mulsf3_pse+0x84>
 336:	e1 f0       	breq	.+56     	; 0x370 <__mulsf3_pse+0x9c>
 338:	88 23       	and	r24, r24
 33a:	4a f0       	brmi	.+18     	; 0x34e <__mulsf3_pse+0x7a>
 33c:	ee 0f       	add	r30, r30
 33e:	ff 1f       	adc	r31, r31
 340:	bb 1f       	adc	r27, r27
 342:	66 1f       	adc	r22, r22
 344:	77 1f       	adc	r23, r23
 346:	88 1f       	adc	r24, r24
 348:	91 50       	subi	r25, 0x01	; 1
 34a:	50 40       	sbci	r21, 0x00	; 0
 34c:	a9 f7       	brne	.-22     	; 0x338 <__mulsf3_pse+0x64>
 34e:	9e 3f       	cpi	r25, 0xFE	; 254
 350:	51 05       	cpc	r21, r1
 352:	70 f0       	brcs	.+28     	; 0x370 <__mulsf3_pse+0x9c>
 354:	14 c0       	rjmp	.+40     	; 0x37e <__fp_inf>
 356:	5e c0       	rjmp	.+188    	; 0x414 <__fp_szero>
 358:	5f 3f       	cpi	r21, 0xFF	; 255
 35a:	ec f3       	brlt	.-6      	; 0x356 <__mulsf3_pse+0x82>
 35c:	98 3e       	cpi	r25, 0xE8	; 232
 35e:	dc f3       	brlt	.-10     	; 0x356 <__mulsf3_pse+0x82>
 360:	86 95       	lsr	r24
 362:	77 95       	ror	r23
 364:	67 95       	ror	r22
 366:	b7 95       	ror	r27
 368:	f7 95       	ror	r31
 36a:	e7 95       	ror	r30
 36c:	9f 5f       	subi	r25, 0xFF	; 255
 36e:	c1 f7       	brne	.-16     	; 0x360 <__mulsf3_pse+0x8c>
 370:	fe 2b       	or	r31, r30
 372:	88 0f       	add	r24, r24
 374:	91 1d       	adc	r25, r1
 376:	96 95       	lsr	r25
 378:	87 95       	ror	r24
 37a:	97 f9       	bld	r25, 7
 37c:	08 95       	ret

0000037e <__fp_inf>:
 37e:	97 f9       	bld	r25, 7
 380:	9f 67       	ori	r25, 0x7F	; 127
 382:	80 e8       	ldi	r24, 0x80	; 128
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	08 95       	ret

0000038a <__fp_nan>:
 38a:	9f ef       	ldi	r25, 0xFF	; 255
 38c:	80 ec       	ldi	r24, 0xC0	; 192
 38e:	08 95       	ret

00000390 <__fp_pscA>:
 390:	00 24       	eor	r0, r0
 392:	0a 94       	dec	r0
 394:	16 16       	cp	r1, r22
 396:	17 06       	cpc	r1, r23
 398:	18 06       	cpc	r1, r24
 39a:	09 06       	cpc	r0, r25
 39c:	08 95       	ret

0000039e <__fp_pscB>:
 39e:	00 24       	eor	r0, r0
 3a0:	0a 94       	dec	r0
 3a2:	12 16       	cp	r1, r18
 3a4:	13 06       	cpc	r1, r19
 3a6:	14 06       	cpc	r1, r20
 3a8:	05 06       	cpc	r0, r21
 3aa:	08 95       	ret

000003ac <__fp_round>:
 3ac:	09 2e       	mov	r0, r25
 3ae:	03 94       	inc	r0
 3b0:	00 0c       	add	r0, r0
 3b2:	11 f4       	brne	.+4      	; 0x3b8 <__fp_round+0xc>
 3b4:	88 23       	and	r24, r24
 3b6:	52 f0       	brmi	.+20     	; 0x3cc <__fp_round+0x20>
 3b8:	bb 0f       	add	r27, r27
 3ba:	40 f4       	brcc	.+16     	; 0x3cc <__fp_round+0x20>
 3bc:	bf 2b       	or	r27, r31
 3be:	11 f4       	brne	.+4      	; 0x3c4 <__fp_round+0x18>
 3c0:	60 ff       	sbrs	r22, 0
 3c2:	04 c0       	rjmp	.+8      	; 0x3cc <__fp_round+0x20>
 3c4:	6f 5f       	subi	r22, 0xFF	; 255
 3c6:	7f 4f       	sbci	r23, 0xFF	; 255
 3c8:	8f 4f       	sbci	r24, 0xFF	; 255
 3ca:	9f 4f       	sbci	r25, 0xFF	; 255
 3cc:	08 95       	ret

000003ce <__fp_split3>:
 3ce:	57 fd       	sbrc	r21, 7
 3d0:	90 58       	subi	r25, 0x80	; 128
 3d2:	44 0f       	add	r20, r20
 3d4:	55 1f       	adc	r21, r21
 3d6:	59 f0       	breq	.+22     	; 0x3ee <__fp_splitA+0x10>
 3d8:	5f 3f       	cpi	r21, 0xFF	; 255
 3da:	71 f0       	breq	.+28     	; 0x3f8 <__fp_splitA+0x1a>
 3dc:	47 95       	ror	r20

000003de <__fp_splitA>:
 3de:	88 0f       	add	r24, r24
 3e0:	97 fb       	bst	r25, 7
 3e2:	99 1f       	adc	r25, r25
 3e4:	61 f0       	breq	.+24     	; 0x3fe <__fp_splitA+0x20>
 3e6:	9f 3f       	cpi	r25, 0xFF	; 255
 3e8:	79 f0       	breq	.+30     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3ea:	87 95       	ror	r24
 3ec:	08 95       	ret
 3ee:	12 16       	cp	r1, r18
 3f0:	13 06       	cpc	r1, r19
 3f2:	14 06       	cpc	r1, r20
 3f4:	55 1f       	adc	r21, r21
 3f6:	f2 cf       	rjmp	.-28     	; 0x3dc <__fp_split3+0xe>
 3f8:	46 95       	lsr	r20
 3fa:	f1 df       	rcall	.-30     	; 0x3de <__fp_splitA>
 3fc:	08 c0       	rjmp	.+16     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3fe:	16 16       	cp	r1, r22
 400:	17 06       	cpc	r1, r23
 402:	18 06       	cpc	r1, r24
 404:	99 1f       	adc	r25, r25
 406:	f1 cf       	rjmp	.-30     	; 0x3ea <__fp_splitA+0xc>
 408:	86 95       	lsr	r24
 40a:	71 05       	cpc	r23, r1
 40c:	61 05       	cpc	r22, r1
 40e:	08 94       	sec
 410:	08 95       	ret

00000412 <__fp_zero>:
 412:	e8 94       	clt

00000414 <__fp_szero>:
 414:	bb 27       	eor	r27, r27
 416:	66 27       	eor	r22, r22
 418:	77 27       	eor	r23, r23
 41a:	cb 01       	movw	r24, r22
 41c:	97 f9       	bld	r25, 7
 41e:	08 95       	ret

00000420 <_exit>:
 420:	f8 94       	cli

00000422 <__stop_program>:
 422:	ff cf       	rjmp	.-2      	; 0x422 <__stop_program>
