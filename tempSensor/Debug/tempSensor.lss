
tempSensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000492  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000041e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  00000492  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000492  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ad3  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095e  00000000  00000000  00001043  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000415  00000000  00000000  000019a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  00001db8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046d  00000000  00000000  00001ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000155  00000000  00000000  0000230d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002462  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5e c0       	rjmp	.+188    	; 0xfa <__vector_15>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	aa 30       	cpi	r26, 0x0A	; 10
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	90 d0       	rcall	.+288    	; 0x1ca <main>
  aa:	b7 c1       	rjmp	.+878    	; 0x41a <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <SPI_Init>:

unsigned char USART_Receive(void)
{
	while (!(UCSR1A & (1 << RXC1)));
	return UDR1;
}
  ae:	86 e1       	ldi	r24, 0x16	; 22
  b0:	87 bb       	out	0x17, r24	; 23
  b2:	80 e5       	ldi	r24, 0x50	; 80
  b4:	8d b9       	out	0x0d, r24	; 13
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	8e b9       	out	0x0e, r24	; 14
  ba:	08 95       	ret

000000bc <USART_Init>:
  bc:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
  c0:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
  c4:	88 e1       	ldi	r24, 0x18	; 24
  c6:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
  ca:	8e e0       	ldi	r24, 0x0E	; 14
  cc:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
  d0:	08 95       	ret

000000d2 <GPIO_init>:
  d2:	8a b3       	in	r24, 0x1a	; 26
  d4:	86 60       	ori	r24, 0x06	; 6
  d6:	8a bb       	out	0x1a, r24	; 26
  d8:	08 95       	ret

000000da <USART_Transmit>:
  da:	eb e9       	ldi	r30, 0x9B	; 155
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	90 81       	ld	r25, Z
  e0:	95 ff       	sbrs	r25, 5
  e2:	fd cf       	rjmp	.-6      	; 0xde <USART_Transmit+0x4>
  e4:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  e8:	08 95       	ret

000000ea <InitTimer0>:


void InitTimer0(){
	TIMSK |= (1 << OCIE0);
  ea:	87 b7       	in	r24, 0x37	; 55
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	87 bf       	out	0x37, r24	; 55
	TCCR0 = (1 << CS00) | (1 << CS01) | (1 << CS02) | (1 << WGM00) | (1 << WGM01);
  f0:	8f e4       	ldi	r24, 0x4F	; 79
  f2:	83 bf       	out	0x33, r24	; 51
	OCR0 = 7;
  f4:	87 e0       	ldi	r24, 0x07	; 7
  f6:	81 bf       	out	0x31, r24	; 49
  f8:	08 95       	ret

000000fa <__vector_15>:
}

ISR(TIMER0_COMP_vect){
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
	ms_count++;
 108:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ms_count>
 10c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ms_count+0x1>
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <ms_count+0x1>
 116:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ms_count>
}
 11a:	9f 91       	pop	r25
 11c:	8f 91       	pop	r24
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <convert_Temp>:

float convert_Temp(){
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
 130:	62 97       	sbiw	r28, 0x12	; 18
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	f8 94       	cli
 136:	de bf       	out	0x3e, r29	; 62
 138:	0f be       	out	0x3f, r0	; 63
 13a:	cd bf       	out	0x3d, r28	; 61
	int data[9];
	SPI_PORT = (0 << CHIP_SELECT);
 13c:	18 ba       	out	0x18, r1	; 24
	SPSR = (1 << SPI2X);
}

void SPI_Transmit_data(uint8_t message){
	//SPI_PORT = (0 << CHIP_SELECT);
	SPDR = message;
 13e:	8c ec       	ldi	r24, 0xCC	; 204
 140:	8f b9       	out	0x0f, r24	; 15

float convert_Temp(){
	int data[9];
	SPI_PORT = (0 << CHIP_SELECT);
	SPI_Transmit_data(0xCC);
	SPI_PORT = (1 << CHIP_SELECT);
 142:	80 e1       	ldi	r24, 0x10	; 16
 144:	88 bb       	out	0x18, r24	; 24
	SPI_PORT = (0 << CHIP_SELECT);
 146:	18 ba       	out	0x18, r1	; 24
	SPSR = (1 << SPI2X);
}

void SPI_Transmit_data(uint8_t message){
	//SPI_PORT = (0 << CHIP_SELECT);
	SPDR = message;
 148:	94 e4       	ldi	r25, 0x44	; 68
 14a:	9f b9       	out	0x0f, r25	; 15
	SPI_PORT = (0 << CHIP_SELECT);
	SPI_Transmit_data(0xCC);
	SPI_PORT = (1 << CHIP_SELECT);
	SPI_PORT = (0 << CHIP_SELECT);
	SPI_Transmit_data(0x44);
	SPI_PORT = (1 << CHIP_SELECT);
 14c:	88 bb       	out	0x18, r24	; 24
	while(ms_count != 100){
 14e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ms_count>
 152:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ms_count+0x1>
 156:	84 36       	cpi	r24, 0x64	; 100
 158:	91 05       	cpc	r25, r1
 15a:	c9 f7       	brne	.-14     	; 0x14e <convert_Temp+0x26>
		int e;
	}
	ms_count = 0;
 15c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <ms_count+0x1>
 160:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <ms_count>
	SPI_PORT = (0 << CHIP_SELECT);
 164:	18 ba       	out	0x18, r1	; 24
	//SPI_Recieve_data(0x00);
	SPI_PORT = (1 << CHIP_SELECT);
 166:	80 e1       	ldi	r24, 0x10	; 16
 168:	88 bb       	out	0x18, r24	; 24
	SPI_PORT = (0 << CHIP_SELECT);
 16a:	18 ba       	out	0x18, r1	; 24
	//SPI_Recieve_data(0x00);
	SPI_PORT = (1 << CHIP_SELECT);
 16c:	88 bb       	out	0x18, r24	; 24
	int T_KOD;
	T_KOD = (data[0] | (data[1] << 8));
	temp = (float)T_KOD * 0.0625;
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	7b 81       	ldd	r23, Y+3	; 0x03
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	9a 81       	ldd	r25, Y+2	; 0x02
 178:	68 2b       	or	r22, r24
 17a:	79 2b       	or	r23, r25
 17c:	07 2e       	mov	r0, r23
 17e:	00 0c       	add	r0, r0
 180:	88 0b       	sbc	r24, r24
 182:	99 0b       	sbc	r25, r25
 184:	5b d0       	rcall	.+182    	; 0x23c <__floatsisf>
 186:	20 e0       	ldi	r18, 0x00	; 0
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	40 e8       	ldi	r20, 0x80	; 128
 18c:	5d e3       	ldi	r21, 0x3D	; 61
 18e:	91 d0       	rcall	.+290    	; 0x2b2 <__mulsf3>
 190:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <temp>
 194:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <temp+0x1>
 198:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <temp+0x2>
 19c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <temp+0x3>
	TEST_PORT ^= (1 << TEST_LED_SPI);
 1a0:	9b b3       	in	r25, 0x1b	; 27
 1a2:	84 e0       	ldi	r24, 0x04	; 4
 1a4:	89 27       	eor	r24, r25
 1a6:	8b bb       	out	0x1b, r24	; 27
	return temp;
 1a8:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <temp>
 1ac:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <temp+0x1>
 1b0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <temp+0x2>
 1b4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <temp+0x3>
	
}
 1b8:	62 96       	adiw	r28, 0x12	; 18
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	de bf       	out	0x3e, r29	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	cd bf       	out	0x3d, r28	; 61
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <main>:

int main(void)
{
	
	
	InitTimer0();
 1ca:	8f df       	rcall	.-226    	; 0xea <InitTimer0>
	SPI_Init();
 1cc:	70 df       	rcall	.-288    	; 0xae <SPI_Init>
 1ce:	87 e6       	ldi	r24, 0x67	; 103
	USART_Init(UBBR_VALUE);
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	74 df       	rcall	.-280    	; 0xbc <USART_Init>
	GPIO_init();
 1d4:	7e df       	rcall	.-260    	; 0xd2 <GPIO_init>
 1d6:	9b b3       	in	r25, 0x1b	; 27
	
	TEST_PORT ^= (1 << TEST_LED_SPI);
 1d8:	84 e0       	ldi	r24, 0x04	; 4
 1da:	89 27       	eor	r24, r25
 1dc:	8b bb       	out	0x1b, r24	; 27
 1de:	9b b3       	in	r25, 0x1b	; 27
	TEST_PORT ^= (1 << TEST_LED_UART);
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	89 27       	eor	r24, r25
 1e4:	8b bb       	out	0x1b, r24	; 27
 1e6:	78 94       	sei
		//msg = 100.99;
		unsigned char* ptr;
		ptr = (unsigned char*)& msg;
		
		for(int i = 0; i < 4; i++){
			USART_Transmit(*(ptr++));
 1e8:	c0 e0       	ldi	r28, 0x00	; 0
 1ea:	d1 e0       	ldi	r29, 0x01	; 1
				while(ms_count != 100){
					int t;
				}
			}
		}
		TEST_PORT ^= (1 << TEST_LED_UART);
 1ec:	12 e0       	ldi	r17, 0x02	; 2
	unsigned char strlenght = 12;
	unsigned char k = 0;
    while (1) 
    {
		
		msg = convert_Temp();
 1ee:	9c df       	rcall	.-200    	; 0x128 <convert_Temp>
 1f0:	26 2f       	mov	r18, r22
 1f2:	46 2f       	mov	r20, r22
 1f4:	57 2f       	mov	r21, r23
 1f6:	68 2f       	mov	r22, r24
 1f8:	79 2f       	mov	r23, r25
 1fa:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__DATA_REGION_ORIGIN__>
 1fe:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 202:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 206:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
		//msg = 100.99;
		unsigned char* ptr;
		ptr = (unsigned char*)& msg;
		
		for(int i = 0; i < 4; i++){
			USART_Transmit(*(ptr++));
 20a:	82 2f       	mov	r24, r18
 20c:	66 df       	rcall	.-308    	; 0xda <USART_Transmit>
 20e:	89 81       	ldd	r24, Y+1	; 0x01
 210:	64 df       	rcall	.-312    	; 0xda <USART_Transmit>
 212:	8a 81       	ldd	r24, Y+2	; 0x02
 214:	62 df       	rcall	.-316    	; 0xda <USART_Transmit>
 216:	8b 81       	ldd	r24, Y+3	; 0x03
 218:	60 df       	rcall	.-320    	; 0xda <USART_Transmit>
 21a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ms_count>
			if(i == 3){
				while(ms_count != 100){
 21e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ms_count+0x1>
 222:	84 36       	cpi	r24, 0x64	; 100
 224:	91 05       	cpc	r25, r1
 226:	c9 f7       	brne	.-14     	; 0x21a <main+0x50>
 228:	8b b3       	in	r24, 0x1b	; 27
					int t;
				}
			}
		}
		TEST_PORT ^= (1 << TEST_LED_UART);
 22a:	81 27       	eor	r24, r17
 22c:	8b bb       	out	0x1b, r24	; 27
 22e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <ms_count+0x1>
		ms_count = 0;
 232:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <ms_count>
 236:	db cf       	rjmp	.-74     	; 0x1ee <main+0x24>

00000238 <__floatunsisf>:
	}
 238:	e8 94       	clt
 23a:	09 c0       	rjmp	.+18     	; 0x24e <__floatsisf+0x12>

0000023c <__floatsisf>:
 23c:	97 fb       	bst	r25, 7
 23e:	3e f4       	brtc	.+14     	; 0x24e <__floatsisf+0x12>
 240:	90 95       	com	r25
 242:	80 95       	com	r24
 244:	70 95       	com	r23
 246:	61 95       	neg	r22
 248:	7f 4f       	sbci	r23, 0xFF	; 255
 24a:	8f 4f       	sbci	r24, 0xFF	; 255
 24c:	9f 4f       	sbci	r25, 0xFF	; 255
 24e:	99 23       	and	r25, r25
 250:	a9 f0       	breq	.+42     	; 0x27c <__floatsisf+0x40>
 252:	f9 2f       	mov	r31, r25
 254:	96 e9       	ldi	r25, 0x96	; 150
 256:	bb 27       	eor	r27, r27
 258:	93 95       	inc	r25
 25a:	f6 95       	lsr	r31
 25c:	87 95       	ror	r24
 25e:	77 95       	ror	r23
 260:	67 95       	ror	r22
 262:	b7 95       	ror	r27
 264:	f1 11       	cpse	r31, r1
 266:	f8 cf       	rjmp	.-16     	; 0x258 <__floatsisf+0x1c>
 268:	fa f4       	brpl	.+62     	; 0x2a8 <__floatsisf+0x6c>
 26a:	bb 0f       	add	r27, r27
 26c:	11 f4       	brne	.+4      	; 0x272 <__floatsisf+0x36>
 26e:	60 ff       	sbrs	r22, 0
 270:	1b c0       	rjmp	.+54     	; 0x2a8 <__floatsisf+0x6c>
 272:	6f 5f       	subi	r22, 0xFF	; 255
 274:	7f 4f       	sbci	r23, 0xFF	; 255
 276:	8f 4f       	sbci	r24, 0xFF	; 255
 278:	9f 4f       	sbci	r25, 0xFF	; 255
 27a:	16 c0       	rjmp	.+44     	; 0x2a8 <__floatsisf+0x6c>
 27c:	88 23       	and	r24, r24
 27e:	11 f0       	breq	.+4      	; 0x284 <__floatsisf+0x48>
 280:	96 e9       	ldi	r25, 0x96	; 150
 282:	11 c0       	rjmp	.+34     	; 0x2a6 <__floatsisf+0x6a>
 284:	77 23       	and	r23, r23
 286:	21 f0       	breq	.+8      	; 0x290 <__floatsisf+0x54>
 288:	9e e8       	ldi	r25, 0x8E	; 142
 28a:	87 2f       	mov	r24, r23
 28c:	76 2f       	mov	r23, r22
 28e:	05 c0       	rjmp	.+10     	; 0x29a <__floatsisf+0x5e>
 290:	66 23       	and	r22, r22
 292:	71 f0       	breq	.+28     	; 0x2b0 <__floatsisf+0x74>
 294:	96 e8       	ldi	r25, 0x86	; 134
 296:	86 2f       	mov	r24, r22
 298:	70 e0       	ldi	r23, 0x00	; 0
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	2a f0       	brmi	.+10     	; 0x2a8 <__floatsisf+0x6c>
 29e:	9a 95       	dec	r25
 2a0:	66 0f       	add	r22, r22
 2a2:	77 1f       	adc	r23, r23
 2a4:	88 1f       	adc	r24, r24
 2a6:	da f7       	brpl	.-10     	; 0x29e <__floatsisf+0x62>
 2a8:	88 0f       	add	r24, r24
 2aa:	96 95       	lsr	r25
 2ac:	87 95       	ror	r24
 2ae:	97 f9       	bld	r25, 7
 2b0:	08 95       	ret

000002b2 <__mulsf3>:
 2b2:	0b d0       	rcall	.+22     	; 0x2ca <__mulsf3x>
 2b4:	78 c0       	rjmp	.+240    	; 0x3a6 <__fp_round>
 2b6:	69 d0       	rcall	.+210    	; 0x38a <__fp_pscA>
 2b8:	28 f0       	brcs	.+10     	; 0x2c4 <__mulsf3+0x12>
 2ba:	6e d0       	rcall	.+220    	; 0x398 <__fp_pscB>
 2bc:	18 f0       	brcs	.+6      	; 0x2c4 <__mulsf3+0x12>
 2be:	95 23       	and	r25, r21
 2c0:	09 f0       	breq	.+2      	; 0x2c4 <__mulsf3+0x12>
 2c2:	5a c0       	rjmp	.+180    	; 0x378 <__fp_inf>
 2c4:	5f c0       	rjmp	.+190    	; 0x384 <__fp_nan>
 2c6:	11 24       	eor	r1, r1
 2c8:	a2 c0       	rjmp	.+324    	; 0x40e <__fp_szero>

000002ca <__mulsf3x>:
 2ca:	7e d0       	rcall	.+252    	; 0x3c8 <__fp_split3>
 2cc:	a0 f3       	brcs	.-24     	; 0x2b6 <__mulsf3+0x4>

000002ce <__mulsf3_pse>:
 2ce:	95 9f       	mul	r25, r21
 2d0:	d1 f3       	breq	.-12     	; 0x2c6 <__mulsf3+0x14>
 2d2:	95 0f       	add	r25, r21
 2d4:	50 e0       	ldi	r21, 0x00	; 0
 2d6:	55 1f       	adc	r21, r21
 2d8:	62 9f       	mul	r22, r18
 2da:	f0 01       	movw	r30, r0
 2dc:	72 9f       	mul	r23, r18
 2de:	bb 27       	eor	r27, r27
 2e0:	f0 0d       	add	r31, r0
 2e2:	b1 1d       	adc	r27, r1
 2e4:	63 9f       	mul	r22, r19
 2e6:	aa 27       	eor	r26, r26
 2e8:	f0 0d       	add	r31, r0
 2ea:	b1 1d       	adc	r27, r1
 2ec:	aa 1f       	adc	r26, r26
 2ee:	64 9f       	mul	r22, r20
 2f0:	66 27       	eor	r22, r22
 2f2:	b0 0d       	add	r27, r0
 2f4:	a1 1d       	adc	r26, r1
 2f6:	66 1f       	adc	r22, r22
 2f8:	82 9f       	mul	r24, r18
 2fa:	22 27       	eor	r18, r18
 2fc:	b0 0d       	add	r27, r0
 2fe:	a1 1d       	adc	r26, r1
 300:	62 1f       	adc	r22, r18
 302:	73 9f       	mul	r23, r19
 304:	b0 0d       	add	r27, r0
 306:	a1 1d       	adc	r26, r1
 308:	62 1f       	adc	r22, r18
 30a:	83 9f       	mul	r24, r19
 30c:	a0 0d       	add	r26, r0
 30e:	61 1d       	adc	r22, r1
 310:	22 1f       	adc	r18, r18
 312:	74 9f       	mul	r23, r20
 314:	33 27       	eor	r19, r19
 316:	a0 0d       	add	r26, r0
 318:	61 1d       	adc	r22, r1
 31a:	23 1f       	adc	r18, r19
 31c:	84 9f       	mul	r24, r20
 31e:	60 0d       	add	r22, r0
 320:	21 1d       	adc	r18, r1
 322:	82 2f       	mov	r24, r18
 324:	76 2f       	mov	r23, r22
 326:	6a 2f       	mov	r22, r26
 328:	11 24       	eor	r1, r1
 32a:	9f 57       	subi	r25, 0x7F	; 127
 32c:	50 40       	sbci	r21, 0x00	; 0
 32e:	8a f0       	brmi	.+34     	; 0x352 <__mulsf3_pse+0x84>
 330:	e1 f0       	breq	.+56     	; 0x36a <__mulsf3_pse+0x9c>
 332:	88 23       	and	r24, r24
 334:	4a f0       	brmi	.+18     	; 0x348 <__mulsf3_pse+0x7a>
 336:	ee 0f       	add	r30, r30
 338:	ff 1f       	adc	r31, r31
 33a:	bb 1f       	adc	r27, r27
 33c:	66 1f       	adc	r22, r22
 33e:	77 1f       	adc	r23, r23
 340:	88 1f       	adc	r24, r24
 342:	91 50       	subi	r25, 0x01	; 1
 344:	50 40       	sbci	r21, 0x00	; 0
 346:	a9 f7       	brne	.-22     	; 0x332 <__mulsf3_pse+0x64>
 348:	9e 3f       	cpi	r25, 0xFE	; 254
 34a:	51 05       	cpc	r21, r1
 34c:	70 f0       	brcs	.+28     	; 0x36a <__mulsf3_pse+0x9c>
 34e:	14 c0       	rjmp	.+40     	; 0x378 <__fp_inf>
 350:	5e c0       	rjmp	.+188    	; 0x40e <__fp_szero>
 352:	5f 3f       	cpi	r21, 0xFF	; 255
 354:	ec f3       	brlt	.-6      	; 0x350 <__mulsf3_pse+0x82>
 356:	98 3e       	cpi	r25, 0xE8	; 232
 358:	dc f3       	brlt	.-10     	; 0x350 <__mulsf3_pse+0x82>
 35a:	86 95       	lsr	r24
 35c:	77 95       	ror	r23
 35e:	67 95       	ror	r22
 360:	b7 95       	ror	r27
 362:	f7 95       	ror	r31
 364:	e7 95       	ror	r30
 366:	9f 5f       	subi	r25, 0xFF	; 255
 368:	c1 f7       	brne	.-16     	; 0x35a <__mulsf3_pse+0x8c>
 36a:	fe 2b       	or	r31, r30
 36c:	88 0f       	add	r24, r24
 36e:	91 1d       	adc	r25, r1
 370:	96 95       	lsr	r25
 372:	87 95       	ror	r24
 374:	97 f9       	bld	r25, 7
 376:	08 95       	ret

00000378 <__fp_inf>:
 378:	97 f9       	bld	r25, 7
 37a:	9f 67       	ori	r25, 0x7F	; 127
 37c:	80 e8       	ldi	r24, 0x80	; 128
 37e:	70 e0       	ldi	r23, 0x00	; 0
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	08 95       	ret

00000384 <__fp_nan>:
 384:	9f ef       	ldi	r25, 0xFF	; 255
 386:	80 ec       	ldi	r24, 0xC0	; 192
 388:	08 95       	ret

0000038a <__fp_pscA>:
 38a:	00 24       	eor	r0, r0
 38c:	0a 94       	dec	r0
 38e:	16 16       	cp	r1, r22
 390:	17 06       	cpc	r1, r23
 392:	18 06       	cpc	r1, r24
 394:	09 06       	cpc	r0, r25
 396:	08 95       	ret

00000398 <__fp_pscB>:
 398:	00 24       	eor	r0, r0
 39a:	0a 94       	dec	r0
 39c:	12 16       	cp	r1, r18
 39e:	13 06       	cpc	r1, r19
 3a0:	14 06       	cpc	r1, r20
 3a2:	05 06       	cpc	r0, r21
 3a4:	08 95       	ret

000003a6 <__fp_round>:
 3a6:	09 2e       	mov	r0, r25
 3a8:	03 94       	inc	r0
 3aa:	00 0c       	add	r0, r0
 3ac:	11 f4       	brne	.+4      	; 0x3b2 <__fp_round+0xc>
 3ae:	88 23       	and	r24, r24
 3b0:	52 f0       	brmi	.+20     	; 0x3c6 <__fp_round+0x20>
 3b2:	bb 0f       	add	r27, r27
 3b4:	40 f4       	brcc	.+16     	; 0x3c6 <__fp_round+0x20>
 3b6:	bf 2b       	or	r27, r31
 3b8:	11 f4       	brne	.+4      	; 0x3be <__fp_round+0x18>
 3ba:	60 ff       	sbrs	r22, 0
 3bc:	04 c0       	rjmp	.+8      	; 0x3c6 <__fp_round+0x20>
 3be:	6f 5f       	subi	r22, 0xFF	; 255
 3c0:	7f 4f       	sbci	r23, 0xFF	; 255
 3c2:	8f 4f       	sbci	r24, 0xFF	; 255
 3c4:	9f 4f       	sbci	r25, 0xFF	; 255
 3c6:	08 95       	ret

000003c8 <__fp_split3>:
 3c8:	57 fd       	sbrc	r21, 7
 3ca:	90 58       	subi	r25, 0x80	; 128
 3cc:	44 0f       	add	r20, r20
 3ce:	55 1f       	adc	r21, r21
 3d0:	59 f0       	breq	.+22     	; 0x3e8 <__fp_splitA+0x10>
 3d2:	5f 3f       	cpi	r21, 0xFF	; 255
 3d4:	71 f0       	breq	.+28     	; 0x3f2 <__fp_splitA+0x1a>
 3d6:	47 95       	ror	r20

000003d8 <__fp_splitA>:
 3d8:	88 0f       	add	r24, r24
 3da:	97 fb       	bst	r25, 7
 3dc:	99 1f       	adc	r25, r25
 3de:	61 f0       	breq	.+24     	; 0x3f8 <__fp_splitA+0x20>
 3e0:	9f 3f       	cpi	r25, 0xFF	; 255
 3e2:	79 f0       	breq	.+30     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3e4:	87 95       	ror	r24
 3e6:	08 95       	ret
 3e8:	12 16       	cp	r1, r18
 3ea:	13 06       	cpc	r1, r19
 3ec:	14 06       	cpc	r1, r20
 3ee:	55 1f       	adc	r21, r21
 3f0:	f2 cf       	rjmp	.-28     	; 0x3d6 <__fp_split3+0xe>
 3f2:	46 95       	lsr	r20
 3f4:	f1 df       	rcall	.-30     	; 0x3d8 <__fp_splitA>
 3f6:	08 c0       	rjmp	.+16     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3f8:	16 16       	cp	r1, r22
 3fa:	17 06       	cpc	r1, r23
 3fc:	18 06       	cpc	r1, r24
 3fe:	99 1f       	adc	r25, r25
 400:	f1 cf       	rjmp	.-30     	; 0x3e4 <__fp_splitA+0xc>
 402:	86 95       	lsr	r24
 404:	71 05       	cpc	r23, r1
 406:	61 05       	cpc	r22, r1
 408:	08 94       	sec
 40a:	08 95       	ret

0000040c <__fp_zero>:
 40c:	e8 94       	clt

0000040e <__fp_szero>:
 40e:	bb 27       	eor	r27, r27
 410:	66 27       	eor	r22, r22
 412:	77 27       	eor	r23, r23
 414:	cb 01       	movw	r24, r22
 416:	97 f9       	bld	r25, 7
 418:	08 95       	ret

0000041a <_exit>:
 41a:	f8 94       	cli

0000041c <__stop_program>:
 41c:	ff cf       	rjmp	.-2      	; 0x41c <__stop_program>
